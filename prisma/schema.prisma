// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//basic building block of an exercise, include a name as well as an ID,
//this is its own table beacause we may do barbell bench press with different rep or set ranges but the basic movement is the same
model Movement {
  id               Int                @id @default(autoincrement())
  name             String
  ExerciseTemplate ExerciseTemplate[]
}

//template for an exercise it inherets from the movement model and will be used the the ExerciseEntry Table to track weights
model ExerciseTemplate {
  id         Int             @id @default(autoincrement())
  reps       Int
  sets       Int
  movementID Int
  movement   Movement        @relation(fields: [movementID], references: [id]) // an exercise references a single movement while a movement can be referenced by multiple exercises (ie 5x5 bench or 3 sets of 10 on bench)
  entries    ExerciseEntry[]
  workoutId  Int
  workout    Workout         @relation(fields: [workoutId], references: [id])
}

//this is the user input section that we will be adding to whenever we create a new exercise entry
model ExerciseEntry {
  id         Int              @id @default(autoincrement())
  notes      String?
  intensity  Int?
  weights    Decimal[]
  exerciseID Int
  exercise   ExerciseTemplate @relation(fields: [exerciseID], references: [id])
  workoutID  Int
  workout    WorkoutEntry     @relation(fields: [workoutID], references: [id])
  order      Int?
}

enum WorkoutType {
  pushHeavy
  pullHeavy
  legsHeavy
  pushLight
  pullLight
  legsLight
}

//workout model is the a collection of exercises , a workout type , an overall grade, notes ,and a date created
model Workout {
  id                Int                @id @default(autoincrement())
  type              WorkoutType
  programID         Int
  program           Program            @relation(fields: [programID], references: [id])
  workoutEntry      WorkoutEntry[]
  exerciseTemplates ExerciseTemplate[]
}

model WorkoutEntry {
  id                Int             @id @default(autoincrement())
  notes             String?
  date              DateTime        @default(now())
  grade             Int?
  preWorkout        Boolean?        @default(false)
  workoutTemplateId Int
  workoutTemplate   Workout         @relation(fields: [workoutTemplateId], references: [id])
  exercises         ExerciseEntry[] //array of n number of exercises

}

//enum of the different types of cardios that I will be likely to be doing for the forseeable future
enum CardioType {
  run
  bike
  swim
  elliptical
  stairs
  rowing
  sports
  climbing
  hike
  sport
  other
}

//cardio model is a collection of a cardio type, distance, time, notes, and calories burned, and timeCreated, and intensity
model Cardio {
  id             Int        @id @default(autoincrement())
  timeCreated    DateTime   @default(now())
  type           CardioType
  distace        Decimal
  time           Int
  caloriesBurned Int
  notes          String
  intensity      Int
}

//a program is a collection of workouts, a name and an ID
model Program {
  id       Int       @id @default(autoincrement())
  name     String
  workouts Workout[]
}
