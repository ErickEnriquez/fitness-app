// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

//basic building block of an exercise, include a name as well as an ID,
//this is its own table beacause we may do barbell bench press with different rep or set ranges but the basic movement is the same
model Movement {
  id               String             @id @default(cuid())
  name             String
  ExerciseTemplate ExerciseTemplate[]
}

//template for an exercise it inherets from the movement model and will be used the the ExerciseEntry Table to track weights
model ExerciseTemplate {
  id         String          @id @default(cuid())
  reps       Int
  sets       Int
  movementId String
  movement   Movement        @relation(fields: [movementId], references: [id]) // an exercise references a single movement while a movement can be referenced by multiple exercises (ie 5x5 bench or 3 sets of 10 on bench)
  entries    ExerciseEntry[]
  workoutId  String
  workout    WorkoutTemplate @relation(fields: [workoutId], references: [id])
}

//this is the user input section that we will be adding to whenever we create a new exercise entry
model ExerciseEntry {
  id         String           @id @default(cuid())
  notes      String?
  intensity  Int?
  weights    Decimal[]
  exerciseId String
  exercise   ExerciseTemplate @relation(fields: [exerciseId], references: [id])
  workoutId  String
  workout    WorkoutEntry     @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  order      Int?
}

enum WorkoutType {
  pushHeavy
  pullHeavy
  legsHeavy
  pushLight
  pullLight
  legsLight
  other
}

//workout model is the a collection of exercises , a workout type , an overall grade, notes ,and a date created
model WorkoutTemplate {
  id                String             @id @default(cuid())
  type              WorkoutType
  name              String
  programId         String
  program           Program            @relation(fields: [programId], references: [id])
  workoutEntry      WorkoutEntry[]
  exerciseTemplates ExerciseTemplate[]
}

model WorkoutEntry {
  id                String          @id @default(cuid())
  notes             String?
  date              DateTime        @default(now())
  grade             Int?
  preWorkout        Boolean?        @default(false)
  workoutTemplateId String
  workoutTemplate   WorkoutTemplate @relation(fields: [workoutTemplateId], references: [id])
  exercises         ExerciseEntry[] //array of n number of exercises
}

//enum of the different types of cardios that I will be likely to be doing for the forseeable future
enum CardioType {
  run
  bike
  swim
  elliptical
  stairs
  rowing
  sports
  climbing
  hike
  sport
  other
}

//cardio model is a collection of a cardio type, distance, time, notes, and calories burned, and timeCreated, and intensity
model Cardio {
  id             String     @id @default(cuid())
  timeCreated    DateTime   @default(now())
  type           CardioType
  distance       Decimal
  time           Int
  caloriesBurned Int
  notes          String
  intensity      Int
  userId         String
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//a program is a collection of workouts, a name and an ID
model Program {
  id       String            @id @default(cuid())
  name     String
  workouts WorkoutTemplate[]
  //like a program a user
  userId   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//=================== Adding users to prisma =========================

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.String
  access_token             String? @db.String
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  isActive      Boolean   @default(false)
  //a list of all of the programs that the user is under
  programs      Program[]
  cardios       Cardio[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
