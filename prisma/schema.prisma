// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//basic building block of an exercise, include a name as well as an ID, then the exercise table handles the number of sets , rps as well as the weight that was lifted
model Movement {
  id       Int        @id @default(autoincrement())
  name     String
  Exercise Exercise[]
}

// an exercise inherents from the movement model, it has a name, an ID, as well as a numnber of reps , sets, and an array to hold the amounts of weight lifted
model Exercise {
  id         Int      @id @default(autoincrement())
  name       String
  reps       Int
  sets       Int
  weights    Int[]
  notes      String
  intensity  Int
  movementID Int
  movement   Movement @relation(fields: [movementID], references: [id]) // an exercise references a single movement while a movement can be referenced by multiple exercises (ie 5x5 bench or 3 sets of 10 on bench)
  workoutID Int
  workout    Workout @relation(fields: [workoutID], references: [id])
}

enum WorkoutType {
  pushHeavy
  pullHeavy
  legsHeavy
  pushLight
  pullLight
  legsLight
}

//workout model is the a collection of exercises an cardios, a workout type , an overall grade, notes ,and a date created
model Workout {
  id    Int         @id @default(autoincrement())
  type  WorkoutType
  notes String
  date  DateTime  @default(now())
  grade Int
  exercises Exercise[] //array of n number of exercises
  cardio Cardio[]
  programID Int
  program   Program @relation(fields: [programID], references: [id])
}

//enum of the different types of cardios that I will be likely to be doing for the forseeable future
enum CardioType {
  run
  bike
  swim
  elliptical
  stairs
  rowing
  sports
  climbing
  hike
  sport
}

//cardio model is a collection of a cardio type, distance, time, notes, and calories burned
model Cardio {
  id             Int        @id @default(autoincrement())
  type           CardioType
  distace        Int
  time           Int
  caloriesBurned Int
  notes          String
  workoutID      Int
  workout        Workout @relation(fields: [workoutID], references: [id])
}

//a program is a collection of workouts, a name and an ID
model Program {
  id   Int    @id @default(autoincrement())
  name String
  workouts Workout[]
}
